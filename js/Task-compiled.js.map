{"version":3,"sources":["Task.js"],"names":[],"mappings":";;;;;;;;;;IAAqB,I;AACjB,oBAAyE;AAAA,YAA7D,OAA6D,uEAAnD,KAAK,GAAL,EAAmD;AAAA,YAAvC,QAAuC,uEAA5B,UAA4B;AAAA,YAAhB,QAAgB,uEAAL,GAAK;;AAAA;;AACrE,aAAK,GAAL,GAAW,KAAK,UAAL,EAAX;AACA,aAAK,WAAL,GAAmB,KAAK,GAAL,EAAnB;AACA,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,QAAL,GAAgB,QAAhB;AACA,aAAK,QAAL,GAAgB,QAAhB,CALqE,CAK3C;AAC7B;;;;sCAEmC;AAAA,gBAAxB,OAAwB,uEAAd,KAAK,OAAS;;AAChC,mBAAO,UAAU,KAAK,WAAtB;AACH;;;qCAEY;AACT;;;AAGA,mBAAO,KAAK,GAAL,EAAP;AACH;;AAED;;;;;;;;qCAKa;AACT,gBAAI,cAAc,KAAK,WAAL,CAAiB,KAAK,GAAL,EAAjB,CAAlB;AACA,gBAAI,mBAAmB,KAAK,WAAL,EAAvB;AACA,gBAAI,YAAa,mBAAmB,WAApC;;AAEA,mBAAO,YAAY,KAAK,QAAxB,CALS,CAKyB;AACrC;;;;;;kBA/BgB,I;AAgCpB","file":"Task-compiled.js","sourcesContent":["export default class Task {\n    constructor(dueDate = Date.now(), taskText = \"taskText\", workload = 100) {\n        this._id = this.generateID();\n        this.createdDate = Date.now();\n        this.dueDate = dueDate;\n        this.taskText = taskText;\n        this.workload = workload; // fibonacci 1, 2, 3, 5, 8, 13\n    }\n\n    getTimeSpan(dueDate = this.dueDate) {\n        return dueDate - this.createdDate;\n    }\n\n    generateID() {\n        /*let numPattern = /[0-9]/g;\n        return parseInt((numPattern.exec(new Date().toISOString())), 10);*/\n\n        return Date.now();\n    }\n\n    /***\n     * calculates the amout of xp depending on the amount of workload\n     * and when the task has been finish (the earlier, the better)\n     * @returns {number}\n     */\n    calcXpGain() {\n        let elapsedTime = this.getTimeSpan(Date.now());\n        let originalTimeSpan = this.getTimeSpan();\n        let timeBonus = (originalTimeSpan / elapsedTime);\n\n        return timeBonus * this.workload; // possible: add random factor\n    }\n};"]}