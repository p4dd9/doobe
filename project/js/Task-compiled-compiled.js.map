{"version":3,"sources":["Task-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;;AAIA,IAAI,eAAe,YAAY;AAAE,aAAS,gBAAT,CAA0B,MAA1B,EAAkC,KAAlC,EAAyC;AAAE,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AAAE,gBAAI,aAAa,MAAM,CAAN,CAAjB,CAA2B,WAAW,UAAX,GAAwB,WAAW,UAAX,IAAyB,KAAjD,CAAwD,WAAW,YAAX,GAA0B,IAA1B,CAAgC,IAAI,WAAW,UAAf,EAA2B,WAAW,QAAX,GAAsB,IAAtB,CAA4B,OAAO,cAAP,CAAsB,MAAtB,EAA8B,WAAW,GAAzC,EAA8C,UAA9C;AAA4D;AAAE,KAAC,OAAO,UAAU,WAAV,EAAuB,UAAvB,EAAmC,WAAnC,EAAgD;AAAE,YAAI,UAAJ,EAAgB,iBAAiB,YAAY,SAA7B,EAAwC,UAAxC,EAAqD,IAAI,WAAJ,EAAiB,iBAAiB,WAAjB,EAA8B,WAA9B,EAA4C,OAAO,WAAP;AAAqB,KAAhN;AAAmN,CAA9hB,EAAnB;;AAEA,SAAS,eAAT,CAAyB,QAAzB,EAAmC,WAAnC,EAAgD;AAAE,QAAI,EAAE,oBAAoB,WAAtB,CAAJ,EAAwC;AAAE,cAAM,IAAI,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,IAAI,OAAO,YAAY;AACnB,aAAS,IAAT,GAAgB;AACZ,YAAI,UAAU,UAAU,MAAV,GAAmB,CAAnB,IAAwB,UAAU,CAAV,MAAiB,SAAzC,GAAqD,UAAU,CAAV,CAArD,GAAoE,KAAK,GAAL,EAAlF;AACA,YAAI,WAAW,UAAU,MAAV,GAAmB,CAAnB,IAAwB,UAAU,CAAV,MAAiB,SAAzC,GAAqD,UAAU,CAAV,CAArD,GAAoE,UAAnF;AACA,YAAI,WAAW,UAAU,MAAV,GAAmB,CAAnB,IAAwB,UAAU,CAAV,MAAiB,SAAzC,GAAqD,UAAU,CAAV,CAArD,GAAoE,GAAnF;;AAEA,wBAAgB,IAAhB,EAAsB,IAAtB;;AAEA,aAAK,GAAL,GAAW,KAAK,UAAL,EAAX;AACA,aAAK,WAAL,GAAmB,KAAK,GAAL,EAAnB;AACA,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,QAAL,GAAgB,QAAhB;AACA,aAAK,QAAL,GAAgB,QAAhB,CAXY,CAWc;AAC7B;;AAED,iBAAa,IAAb,EAAmB,CAAC;AAChB,aAAK,aADW;AAEhB,eAAO,SAAS,WAAT,GAAuB;AAC1B,gBAAI,UAAU,UAAU,MAAV,GAAmB,CAAnB,IAAwB,UAAU,CAAV,MAAiB,SAAzC,GAAqD,UAAU,CAAV,CAArD,GAAoE,KAAK,OAAvF;;AAEA,mBAAO,UAAU,KAAK,WAAtB;AACH;AANe,KAAD,EAOhB;AACC,aAAK,YADN;AAEC,eAAO,SAAS,UAAT,GAAsB;AACzB;;;AAGA,mBAAO,KAAK,GAAL,EAAP;AACH;;AAED;;;;;;AATD,KAPgB,EAsBhB;AACC,aAAK,YADN;AAEC,eAAO,SAAS,UAAT,GAAsB;AACzB,gBAAI,cAAc,KAAK,WAAL,CAAiB,KAAK,GAAL,EAAjB,CAAlB;AACA,gBAAI,mBAAmB,KAAK,WAAL,EAAvB;AACA,gBAAI,YAAY,mBAAmB,WAAnC;;AAEA,mBAAO,YAAY,KAAK,QAAxB,CALyB,CAKS;AACrC;AARF,KAtBgB,CAAnB;;AAiCA,WAAO,IAAP;AACH,CAjDU,EAAX;;AAmDA,QAAQ,OAAR,GAAkB,IAAlB;AACA;;AAEA","file":"Task-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Task = function () {\n    function Task() {\n        var dueDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n        var taskText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"taskText\";\n        var workload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n\n        _classCallCheck(this, Task);\n\n        this._id = this.generateID();\n        this.createdDate = Date.now();\n        this.dueDate = dueDate;\n        this.taskText = taskText;\n        this.workload = workload; // fibonacci 1, 2, 3, 5, 8, 13\n    }\n\n    _createClass(Task, [{\n        key: \"getTimeSpan\",\n        value: function getTimeSpan() {\n            var dueDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dueDate;\n\n            return dueDate - this.createdDate;\n        }\n    }, {\n        key: \"generateID\",\n        value: function generateID() {\n            /*let numPattern = /[0-9]/g;\n            return parseInt((numPattern.exec(new Date().toISOString())), 10);*/\n\n            return Date.now();\n        }\n\n        /***\n         * calculates the amout of xp depending on the amount of workload\n         * and when the task has been finish (the earlier, the better)\n         * @returns {number}\n         */\n\n    }, {\n        key: \"calcXpGain\",\n        value: function calcXpGain() {\n            var elapsedTime = this.getTimeSpan(Date.now());\n            var originalTimeSpan = this.getTimeSpan();\n            var timeBonus = originalTimeSpan / elapsedTime;\n\n            return timeBonus * this.workload; // possible: add random factor\n        }\n    }]);\n\n    return Task;\n}();\n\nexports.default = Task;\n;\n\n//# sourceMappingURL=Task-compiled.js.map"]}